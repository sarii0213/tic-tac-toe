{"ast":null,"code":"var _jsxFileName = \"/Users/sarii/Works/tic-tac-toe/src/App.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Square({\n  value,\n  onSquareClick\n}) {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"square\",\n    onClick: onSquareClick,\n    children: value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this);\n}\n_c = Square;\nfunction Board({\n  xIsNext,\n  squares,\n  onPlay\n}) {\n  function handleClick(i) {\n    if (squares[i] || calculateWinner(squares)) {\n      return;\n    }\n    const nextSquares = squares.slice(); // shallow copy (=share the same references)\n    if (xIsNext) {\n      nextSquares[i] = \"X\";\n    } else {\n      nextSquares[i] = \"O\";\n    }\n    onPlay(nextSquares);\n  }\n  const result = calculateWinner(squares);\n  let status;\n  let winningLine = null;\n  if (result) {\n    if (result.winner === \"Draw\") {\n      status = \"It's a Draw!\";\n    } else {\n      status = \"Winner: \" + result.winner;\n      winningLine = result.line;\n    }\n  } else {\n    status = \"Next player: \" + (xIsNext ? \"X\" : \"O\");\n  }\n  const getSquareStyle = index => {\n    if (winningLine && winningLine.includes(index)) {\n      return {\n        backgroundColor: \"yellow\"\n      };\n    }\n  };\n  const ROW_NUM = 3;\n  const rows = [];\n  for (let i = 0; i < ROW_NUM; i++) {\n    const squaresInRow = [];\n    for (let j = 0; j < ROW_NUM; j++) {\n      const squareIndex = i * ROW_NUM + j;\n      squaresInRow.push( /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[squareIndex],\n        onSquareClick: () => handleClick(squareIndex)\n      }, squareIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this));\n    }\n    rows.push( /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-row\",\n      children: squaresInRow\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 15\n    }, this));\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status\",\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), rows]\n  }, void 0, true);\n}\n_c2 = Board;\nexport default function Game() {\n  _s();\n  const [history, setHistory] = useState([Array(9).fill(null)]);\n  const [currentMove, setCurrentMove] = useState(0);\n  const [ascendingOrder, setAscendingOrder] = useState(true);\n  const xIsNext = currentMove % 2 === 0;\n  const currentSquares = history[currentMove];\n  function handlePlay(nextSquares) {\n    const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];\n    setHistory(nextHistory);\n    setCurrentMove(nextHistory.length - 1);\n  }\n  function jumpTo(nextMove) {\n    setCurrentMove(nextMove);\n  }\n  function toggleOrder() {\n    setAscendingOrder(!ascendingOrder);\n  }\n  const moves = history.map((squares, move) => {\n    const ROW_NUM = 3;\n    const description = move ? `Go to move #${move} (${Math.floor(move / ROW_NUM)}, ${(move + 1) % ROW_NUM})` : 'Go to game start';\n    return /*#__PURE__*/_jsxDEV(\"li\", {\n      children: currentMove === move ? /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"You are at move #\", move]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => jumpTo(move),\n        children: description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this)\n    }, move, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this);\n  });\n  const sortedMoves = ascendingOrder ? moves : moves.slice().reverse();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-board\",\n      children: /*#__PURE__*/_jsxDEV(Board, {\n        xIsNext: xIsNext,\n        squares: currentSquares,\n        onPlay: handlePlay\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: toggleOrder,\n          children: \"Toggle Order\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n        children: sortedMoves\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n}\n_s(Game, \"0nPoRNwJCm+SRZEmUzUg9M4Q6zQ=\");\n_c3 = Game;\nfunction calculateWinner(squares) {\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return {\n        winner: squares[a],\n        line: lines[i]\n      };\n    }\n  }\n  if (squares.every(square => square !== null)) {\n    return {\n      winner: \"Draw\"\n    };\n  }\n  return null;\n}\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Square\");\n$RefreshReg$(_c2, \"Board\");\n$RefreshReg$(_c3, \"Game\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Square","value","onSquareClick","className","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","Board","xIsNext","squares","onPlay","handleClick","i","calculateWinner","nextSquares","slice","result","status","winningLine","winner","line","getSquareStyle","index","includes","backgroundColor","ROW_NUM","rows","squaresInRow","j","squareIndex","push","_c2","Game","_s","history","setHistory","Array","fill","currentMove","setCurrentMove","ascendingOrder","setAscendingOrder","currentSquares","handlePlay","nextHistory","length","jumpTo","nextMove","toggleOrder","moves","map","move","description","Math","floor","sortedMoves","reverse","_c3","lines","a","b","c","every","square","$RefreshReg$"],"sources":["/Users/sarii/Works/tic-tac-toe/src/App.js"],"sourcesContent":["import { useState } from 'react';\n\nfunction Square({ value, onSquareClick }) {\n\n  return (\n    <button \n      className=\"square\"\n      onClick={onSquareClick}\n    >\n      {value}\n    </button>\n  );\n}\n\nfunction Board({ xIsNext, squares, onPlay }) {\n\n  function handleClick(i) {\n    if (squares[i] || calculateWinner(squares)) {\n      return;\n    }\n    const nextSquares = squares.slice(); // shallow copy (=share the same references)\n    if (xIsNext) {\n      nextSquares[i] = \"X\";\n    } else {\n      nextSquares[i] = \"O\";\n    }\n    onPlay(nextSquares);\n  }\n\n  const result = calculateWinner(squares);\n  let status;\n  let winningLine = null;\n\n  if (result) {\n    if (result.winner === \"Draw\") {\n      status = \"It's a Draw!\";\n    } else {\n      status = \"Winner: \" + result.winner;\n      winningLine = result.line;\n    }\n  } else {\n    status = \"Next player: \" + (xIsNext ? \"X\" : \"O\");\n  }\n\n  const getSquareStyle = (index) => {\n    if (winningLine && winningLine.includes(index)) {\n      return { backgroundColor: \"yellow\" }\n    }\n  }\n\n  const ROW_NUM = 3;\n  const rows = [];\n  for (let i = 0; i < ROW_NUM; i++) {\n    const squaresInRow = [];\n    for (let j = 0; j < ROW_NUM; j++) {\n      const squareIndex = i * ROW_NUM + j\n      squaresInRow.push(\n        <Square key={squareIndex} value={squares[squareIndex]} onSquareClick={() => handleClick(squareIndex)} /> \n      );\n    }\n    rows.push(<div className='board-row'>{squaresInRow}</div>)\n  }\n\n  return (\n    <>\n      <div className='status'>{status}</div>\n      {rows}\n    </>\n  );\n}\n\nexport default function Game() {\n  const [history, setHistory] = useState([Array(9).fill(null)]);\n  const [currentMove, setCurrentMove] = useState(0);\n  const [ascendingOrder, setAscendingOrder] = useState(true);\n  const xIsNext = currentMove % 2 === 0;\n  const currentSquares = history[currentMove];\n\n  function handlePlay(nextSquares) {\n    const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];\n    setHistory(nextHistory);\n    setCurrentMove(nextHistory.length - 1);\n  }\n\n  function jumpTo(nextMove) {\n    setCurrentMove(nextMove);\n  }\n\n  function toggleOrder() {\n    setAscendingOrder(!ascendingOrder);\n  }\n\n  const moves = history.map((squares, move) => {\n    const ROW_NUM = 3\n    const description = \n      move ? `Go to move #${move} (${Math.floor(move / ROW_NUM)}, ${(move+1) % ROW_NUM})` : 'Go to game start';\n    return (\n      <li key={move}>\n        {currentMove === move ? (\n          <span>You are at move #{move}</span>\n        ) : (\n          <button onClick={() => jumpTo(move)}>{description}</button>\n        )}\n      </li>\n    );\n  });\n\n  const sortedMoves = ascendingOrder ? moves : moves.slice().reverse();\n\n\n  return (\n    <div className='game'>\n      <div className='game-board'>\n        <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />\n      </div>\n      <div className=\"game-info\">\n        <div>\n          <button onClick={toggleOrder}>Toggle Order</button>\n        </div>\n        <ol>{sortedMoves}</ol>\n      </div>\n    </div>\n  )\n}\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6]\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return {winner: squares[a], line: lines[i]};\n    }\n  }\n  if (squares.every((square) => square !== null)) {\n    return { winner: \"Draw\" };\n  }\n  return null;\n\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}